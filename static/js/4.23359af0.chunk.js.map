{"version":3,"sources":["components/molecules/Map/images/marker.svg","components/organims/MapContainer/images/close.svg","components/molecules/Map/Map.tsx","components/organims/MapContainer/MapContainer.tsx"],"names":["module","exports","__webpack_require__","p","MapWrapper","styled","div","_templateObject","MarkerWrapper","_templateObject2","Marker","React","memo","props","react_default","a","createElement","children","Map","lib_default","bootstrapURLKeys","key","process","defaultCenter","lat","lng","center","coordinates","defaultZoom","src","markerSvg","alt","MapContainerWrapper","MapContainer_templateObject","theme","colors","gainsboro","AddressWrapper","MapContainer_templateObject2","Street","h2","_templateObject3","CloseButton","button","_templateObject4","MapContainer","_React$useContext","useContext","Store","action","state","console","log","status","includes","data-testid","type","onClick","resetState","closeSvg","react","address","logradouro","bairro","localidade","uf","cep","molecules_Map_Map","mapsCoordinates"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sWCUxC,IAAMC,EAAaC,UAAOC,IAAVC,KAKVC,EAAgBH,UAAOC,IAAVG,KAKbC,EAASC,IAAMC,KAAK,SAACC,GAAD,OACxBC,EAAAC,EAAAC,cAACR,EAAD,KACGK,EAAMI,YAkBIC,EAdH,SAACL,GAAD,OACVC,EAAAC,EAAAC,cAACZ,EAAD,KACEU,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,iBAAkB,CAAEC,IAAKC,QACzBC,cAAe,CAACC,KAAM,KAAMC,KAAM,IAClCC,OAAQb,EAAMc,YACdC,YAAa,IAEbd,EAAAC,EAAAC,cAACN,EAAWG,EAAMc,YAChBb,EAAAC,EAAAC,cAAA,OAAKa,IAAKC,IAAWC,IAAI,gtBC5BjC,IAAMC,EAAsB3B,UAAOC,IAAV2B,IACH,SAAApB,GAAK,OAAIA,EAAMqB,MAAMC,OAAOC,YAO5CC,EAAiBhC,UAAOC,IAAVgC,KAQdC,EAASlC,UAAOmC,GAAVC,KAKNC,EAAcrC,UAAOsC,OAAVC,KAoDFC,UAtCM,WAAM,IAAAC,EACCnC,IAAMoC,WAAWC,KAAnCC,EADiBH,EACjBG,OAAQC,EADSJ,EACTI,MAuBhB,OADFC,QAAQC,IAAI,+BAA6BF,EAAMG,QACxC,CAAC,SAAU,SAASC,SAASJ,EAAMG,QAGtCvC,EAAAC,EAAAC,cAACgB,EAAD,KACElB,EAAAC,EAAAC,cAAC0B,EAAD,CAAaa,cAAY,eAAeC,KAAK,SAASC,QAzB/B,WACzB,OAAOR,EAAOS,eAyBV5C,EAAAC,EAAAC,cAAA,OAAKa,IAAK8B,IAAU5B,IAAI,WArBP,UAAjBmB,EAAMG,OAA2BvC,EAAAC,EAAAC,cAAA,qCAGnCF,EAAAC,EAAAC,cAAC4C,EAAA,SAAD,KACE9C,EAAAC,EAAAC,cAACqB,EAAD,KACEvB,EAAAC,EAAAC,cAACuB,EAAD,KAASW,EAAMW,QAAQC,YACvBhD,EAAAC,EAAAC,cAAA,SAAIkC,EAAMW,QAAQE,QAClBjD,EAAAC,EAAAC,cAAA,SAAIkC,EAAMW,QAAQG,WAAlB,MAAiCd,EAAMW,QAAQI,IAC/CnD,EAAAC,EAAAC,cAAA,SAAIkC,EAAMW,QAAQK,MAGpBpD,EAAAC,EAAAC,cAACmD,EAAD,CAAKxC,YAAauB,EAAMW,QAAQO,oBAKkB","file":"static/js/4.23359af0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marker.56fef3db.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.c4a04ae8.svg\";","import React from 'react'\nimport styled from 'styled-components'\nimport GoogleMapReact, { Coords } from 'google-map-react'\n\nimport markerSvg from './images/marker.svg'\n\ninterface IMap {\n  coordinates?: Coords\n}\n\nconst MapWrapper = styled.div`\n  height: 100vh;\n  width: 100%;\n`\n\nconst MarkerWrapper = styled.div`\n  height: 2rem;\n  width: 2rem;\n`\n\nconst Marker = React.memo((props: any) =>\n  <MarkerWrapper>\n    {props.children}\n  </MarkerWrapper>\n)\n\nconst Map = (props: IMap) =>\n  <MapWrapper>\n    <GoogleMapReact\n      bootstrapURLKeys={{ key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY }}\n      defaultCenter={{lat: -15.5, lng: -57}}\n      center={props.coordinates}\n      defaultZoom={15}\n    >\n      <Marker {...props.coordinates}>\n        <img src={markerSvg} alt=\"marker\"/>\n      </Marker>\n    </GoogleMapReact>\n  </MapWrapper>\n\nexport default Map\n","import React, { Fragment } from 'react'\nimport styled from 'styled-components'\n\nimport { Store } from '../../../contexts/store'\nimport Map from '../../molecules/Map'\nimport closeSvg from './images/close.svg'\n\nconst MapContainerWrapper = styled.div`\n  border: 2px solid ${props => props.theme.colors.gainsboro};\n  box-sizing: border-box;\n  margin-top: 1rem;\n  padding: 3rem;\n  position: relative;\n`\n\nconst AddressWrapper = styled.div`\n  margin-bottom: 2rem;\n\n  > * {\n    margin-bottom: 1rem;  \n  }\n`\n\nconst Street = styled.h2`\n  font-size: 1.5rem;\n  font-weight: bold;\n`\n\nconst CloseButton = styled.button`\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  position: absolute;\n  right: 1rem;\n  top: 1rem;\n  \n  img {\n    height: 1rem;\n    width: 1rem;    \n  }\n`\n\nconst MapContainer = () => {\n  const { action, state } = React.useContext(Store)\n\n  const onClickCloseButton = () => {\n    return action.resetState()\n  }\n\n  const shouldShowMap = () => {\n    if (state.status === 'ERROR') return <div>CEP nÃ£o encontrado!</div>\n\n    return (\n      <Fragment>\n        <AddressWrapper>\n          <Street>{state.address.logradouro}</Street>\n          <p>{state.address.bairro}</p>\n          <p>{state.address.localidade} - {state.address.uf}</p>\n          <p>{state.address.cep}</p>\n        </AddressWrapper>\n\n        <Map coordinates={state.address.mapsCoordinates} />\n      </Fragment>\n    )\n  }\nconsole.log('state.status------------>', state.status)\n  if (!['LOADED', 'ERROR'].includes(state.status)) return null\n\n  return (\n    <MapContainerWrapper >\n      <CloseButton data-testid=\"close-button\" type=\"button\" onClick={onClickCloseButton}>\n        <img src={closeSvg} alt=\"close\"/>\n      </CloseButton>\n\n      {shouldShowMap()}\n    </MapContainerWrapper>\n  )\n}\n\n\nexport default MapContainer\n"],"sourceRoot":""}